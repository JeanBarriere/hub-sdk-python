{
  "wrapper_service_data_fixture": [{
    "service": {
      "name": "python",
      "alias": "python",
      "owner": {
        "username": "microservice"
      },
      "topics": [
        "python",
        "microservice"
      ],
      "description": "Execute a Python file with arguments.",
      "isCertified": "false",
      "public": "true"
    },
    "serviceUuid": "0453f136-fe37-4c03-98a9-6ee38165c19e",
    "state": "BETA",
    "configuration": {
      "volumes": {
        "py": {
          "target": "/data"
        }
      },
      "entrypoint": {
        "help": "Execute a Python file.",
        "arguments": {
          "path": {
            "help": "Path to the Python file to execute.",
            "type": "string",
            "required": "true"
          }
        }
      }
    },
    "readme": "nothing to see here."
  },
    {
      "service": {
        "name": "hashes",
        "alias": null,
        "owner": {
          "username": "microservice"
        },
        "topics": [
          "hashing",
          "omg",
          "microservice"
        ],
        "description": "An OMG service which provides various hashing capabilities",
        "isCertified": "false",
        "public": "true"
      },
      "serviceUuid": "0ceab9e4-b353-467d-8c77-e1538ab80ec1",
      "state": "BETA",
      "configuration": {
        "omg": 1,
        "info": {
          "title": "Hashes",
          "license": {
            "url": "https://opensource.org/licenses/MIT",
            "name": "MIT"
          },
          "version": "0.1.0",
          "description": "Digest and hashing capabilities"
        },
        "actions": {
          "hmac": {
            "http": {
              "path": "/hmac",
              "port": 8080,
              "method": "post"
            },
            "output": {
              "type": "object",
              "properties": {
                "digest": {
                  "type": "string"
                }
              },
              "contentType": "application/json"
            },
            "arguments": {
              "data": {
                "in": "requestBody",
                "type": "string",
                "required": "true"
              }
            }
          },
          "digest": {
            "http": {
              "path": "/digest",
              "port": 8080,
              "method": "post"
            },
            "output": {
              "type": "object",
              "properties": {
                "digest": {
                  "type": "string"
                }
              },
              "contentType": "application/json"
            },
            "arguments": {
              "data": {
                "in": "requestBody",
                "type": "string",
                "required": "true"
              }
            }
          }
        },
        "lifecycle": {
          "startup": {
            "command": []
          }
        }
      },
      "readme": "Hashes\n=======\n\n[![Build status](https://img.shields.io/travis/microservice/hashes/master.svg?style=for-the-badge)](https://travis-ci.org/microservice/hashes)\n\nThis OMG service provides various digest and hashing capabilities.\n\nUsage\n-----\n\n```coffee\n# Storyscript\ndigest = hashes digest method: \"sha1\" data: \"hello world\"\n# {\"method\":\"sha1\",\"digest\":\"2AAE6C35C94FCFB415DBE95F408B9CE91EE846ED\"}\n```\n\n```coffee\n# Storyscript\ndigest = hashes hmac method: \"sha1\" data: \"hello world\" secret: \"my secret\"\n# {\"method\":\"sha1\",\"digest\":\"9F60EE4B05E590A7F3FAC552BFB9D98FA46F78D9\"}\n```\n"
    },
    {
      "service": {
        "name": "http",
        "alias": "http",
        "owner": {
          "username": "storyscript"
        },
        "topics": [
          "omg",
          "storyscript",
          "microservice"
        ],
        "description": "The Asyncy API gateway server for executing Stories via HTTP.",
        "isCertified": "true",
        "public": "true"
      },
      "serviceUuid": "18564840-7551-4bb7-9ba7-bb9c9e2d92b4",
      "state": "BETA",
      "configuration": {
        "omg": 1,
        "actions": {
          "help": "Make http calls and listen for http connections through the Asyncy Gateway\nresulting in serverless http endpoints.\n",
          "fetch": {
            "help": "Make a HTTP request to the outside world.\nThis command is native to the platform for performance reasons.\n",
            "output": {
              "type": "any"
            },
            "arguments": {
              "url": {
                "in": "requestBody",
                "type": "string",
                "required": "true"
              }
            }
          },
          "server": {
            "events": {
              "listen": {
                "help": "Listen and respond to http connections by\nregistering with the Asyncy Gateway resulting in a serverless function.\n",
                "http": {
                  "port": 8889,
                  "subscribe": {
                    "path": "/register",
                    "method": "post",
                    "contentType": "application/json"
                  },
                  "unsubscribe": {
                    "path": "/unregister",
                    "method": "post",
                    "contentType": "application/json"
                  }
                },
                "output": {
                  "type": "object",
                  "actions": {
                    "flush": {
                      "http": {
                        "contentType": "application/json",
                        "use_event_conn": "true"
                      }
                    }
                  },
                  "properties": {
                    "uri": {
                      "help": "The URI of the incoming HTTP request",
                      "type": "string"
                    }
                  },
                  "contentType": "application/json"
                },
                "arguments": {
                  "path": {
                    "in": "requestBody",
                    "type": "string",
                    "required": "true"
                  }
                }
              }
            }
          }
        }
      },
      "readme": "# Asyncy HTTP Gateway\n\nAPI gateway server for executing Stories via HTTP.\n\n```coffee\nhttp server as server\n  when server listen method:'get' path:'/' as r\n    log info msg:r.body\n    log info msg:r.headers\n    log info msg:r.headers['Host']\n    r write data:'Hello World'\n    r status code:200\n    r finish\n```\n\n```sh\n$ curl https://foobar.storyscriptapp.com/\nHello World\n```\n\n\n## Development\n\nSetup virtual environment and install dependencies\n```\nvirtualenv -p python3.6 venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\nRun locally by calling\n\n```\npython -m app.main --logging=debug --debug\n```\n\n### Register an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/register\n```\n\nNow access that endpoint\n\n```shell\ncurl -X POST -d 'foobar' -H \"Host: a.storyscriptapp.com\" http://localhost:8888/ping\n```\n\n\n### Unregister an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/unregister\n```\n"
    },
    {
      "service": {
        "name": "helloworld",
        "alias": "hello",
        "owner": {
          "username": "test"
        },
        "topics": [
          "hello"
        ],
        "description": "Does something completely pointless",
        "isCertified": "false",
        "public": "true"
      },
      "serviceUuid": "0453f136-fe37-4c03-98a9-6ee38165c19e",
      "state": "BETA",
      "configuration": {
        "entrypoint": {
          "help": "Hello World",
          "arguments": {
            "path": {
              "help": "Path to something pointless",
              "type": "string",
              "required": "true"
            }
          }
        }
      },
      "readme": "Hello World"
    }, {
      "service": {
        "name": "hashes",
        "alias": null,
        "owner": {
          "username": "microservice"
        },
        "topics": [
          "hashing",
          "omg",
          "microservice"
        ],
        "description": "An OMG service which provides various hashing capabilities",
        "isCertified": "false",
        "public": "true"
      },
      "serviceUuid": "0ceab9e4-b353-467d-8c77-e1538ab80ec1",
      "state": "BETA",
      "configuration": {
        "omg": 1,
        "info": {
          "title": "Hashes",
          "license": {
            "url": "https://opensource.org/licenses/MIT",
            "name": "MIT"
          },
          "version": "0.1.0",
          "description": "Digest and hashing capabilities"
        },
        "actions": {
          "hmac": {
            "http": {
              "path": "/hmac",
              "port": 8080,
              "method": "post"
            },
            "output": {
              "type": "object",
              "properties": {
                "digest": {
                  "type": "string"
                }
              },
              "contentType": "application/json"
            },
            "arguments": {
              "data": {
                "in": "requestBody",
                "type": "string",
                "required": "true"
              }
            }
          }
        },
        "lifecycle": {
          "startup": {
            "command": []
          }
        }
      },
      "readme": "Hashes\n=======\n\n[![Build status](https://img.shields.io/travis/microservice/hashes/master.svg?style=for-the-badge)](https://travis-ci.org/microservice/hashes)\n\nThis OMG service provides various digest and hashing capabilities.\n\nUsage\n-----\n\n```coffee\n# Storyscript\ndigest = hashes digest method: \"sha1\" data: \"hello world\"\n# {\"method\":\"sha1\",\"digest\":\"2AAE6C35C94FCFB415DBE95F408B9CE91EE846ED\"}\n```\n\n```coffee\n# Storyscript\ndigest = hashes hmac method: \"sha1\" data: \"hello world\" secret: \"my secret\"\n# {\"method\":\"sha1\",\"digest\":\"9F60EE4B05E590A7F3FAC552BFB9D98FA46F78D9\"}\n```\n"
    }],
  "not_python_fixture" : {
    "service": {
      "name": "not_python",
      "alias": "npython",
      "owner": {
        "username": "microservice"
      },
      "topics": [
        "npython",
        "microservice"
      ],
      "description": "Don't execute a Python file with arguments.",
      "isCertified": "false",
      "public": "true"
    },
    "serviceUuid": "0453f136-fe67-4c03-98a9-6ee38165c19e",
    "state": "BETA",
    "configuration": {
      "volumes": {
        "py": {
          "target": "/data"
        }
      },
      "entrypoint": {
        "help": "Don't execute a python file file.",
        "arguments": {
          "path": {
            "help": "Path to the Python file to not execute.",
            "type": "string",
            "required": "true"
          }
        }
      }
    },
    "readme": "nothing to see here."
  },
  "hello_services": [{
    "service": {
      "name": "helloworld",
      "alias": "hello",
      "owner": {
        "username": "test"
      },
      "topics": [
        "hello"
      ],
      "description": "Does something completely pointless",
      "isCertified": "false",
      "public": "true"
    },
    "serviceUuid": "0453f136-fe37-4c03-98a9-6ee38165c19e",
    "state": "BETA",
    "configuration": {
      "entrypoint": {
        "help": "Hello World",
        "arguments": {
          "path": {
            "help": "Path to something pointless",
            "type": "string",
            "required": "true"
          }
        }
      }
    },
    "readme": "Hello World"
  }],
  "service_data_fixture": {
    "service_data": {
      "service": {
        "name": "http",
        "alias": "http",
        "owner": {
          "username": "storyscript"
        },
        "topics": [
          "omg",
          "storyscript",
          "microservice"
        ],
        "description": "The Storyscript API gateway server for executing Stories via HTTP.",
        "isCertified": "true",
        "public": "true"
      },
      "serviceUuid": "18564840-7551-4bb7-9ba7-bb9c9e2d92b4",
      "state": "BETA",
      "configuration": {
        "omg": 1,
        "actions": {
          "help": "Make http calls and listen for http connections through the Storyscript Gateway\nresulting in serverless http endpoints.\n",
          "fetch": {
            "help": "Make a HTTP request to the outside world.\nThis command is native to the platform for performance reasons.\n",
            "output": {
              "type": "any"
            },
            "arguments": {
              "url": {
                "in": "requestBody",
                "type": "string",
                "required": "true"
              },
              "body": {
                "in": "requestBody",
                "type": "any"
              },
              "query": {
                "in": "requestBody",
                "help": "Set an optional map of query parameters.\nQuery parameters are automatically appended to the url specified (/url?foo=bar&john=doe)\n",
                "type": "map"
              },
              "method": {
                "in": "requestBody",
                "enum": [
                  "get",
                  "post",
                  "patch",
                  "delete",
                  "put",
                  "options"
                ],
                "type": "string",
                "default": "get"
              },
              "headers": {
                "in": "requestBody",
                "type": "map"
              }
            }
          },
          "server": {
            "events": {
              "listen": {
                "help": "Listen and respond to http connections by\nregistering with the Storyscript Gateway resulting in a serverless function.\n",
                "http": {
                  "port": 8889,
                  "subscribe": {
                    "path": "/register",
                    "method": "post",
                    "contentType": "application/json"
                  },
                  "unsubscribe": {
                    "path": "/unregister",
                    "method": "post",
                    "contentType": "application/json"
                  }
                },
                "output": {
                  "type": "object",
                  "actions": {
                    "flush": {
                      "http": {
                        "contentType": "application/json",
                        "use_event_conn": "true"
                      }
                    },
                    "write": {
                      "http": {
                        "contentType": "application/json",
                        "use_event_conn": "true"
                      },
                      "arguments": {
                        "flush": {
                          "in": "responseBody",
                          "type": "boolean",
                          "required": "true"
                        },
                        "content": {
                          "in": "responseBody",
                          "type": "string",
                          "required": "true"
                        }
                      }
                    },
                    "finish": {
                      "http": {
                        "contentType": "application/json",
                        "use_event_conn": "true"
                      }
                    },
                    "redirect": {
                      "help": "Redirect the incoming URL. No additional actions may be used after executing this command.",
                      "http": {
                        "contentType": "application/json",
                        "use_event_conn": "true"
                      },
                      "arguments": {
                        "url": {
                          "in": "responseBody",
                          "type": "string",
                          "required": "true"
                        },
                        "query": {
                          "in": "responseBody",
                          "help": "These query parameters are appended to the URL specified.",
                          "type": "map"
                        }
                      }
                    },
                    "get_header": {
                      "http": {
                        "contentType": "application/json",
                        "use_event_conn": "true"
                      },
                      "arguments": {
                        "key": {
                          "in": "responseBody",
                          "type": "string",
                          "required": "true"
                        }
                      }
                    },
                    "set_header": {
                      "http": {
                        "contentType": "application/json",
                        "use_event_conn": "true"
                      },
                      "arguments": {
                        "key": {
                          "in": "responseBody",
                          "type": "string",
                          "required": "true"
                        },
                        "value": {
                          "in": "responseBody",
                          "type": "string",
                          "required": "true"
                        }
                      }
                    },
                    "set_status": {
                      "http": {
                        "contentType": "application/json",
                        "use_event_conn": "true"
                      },
                      "arguments": {
                        "code": {
                          "in": "responseBody",
                          "type": "int",
                          "required": "true"
                        }
                      }
                    }
                  },
                  "properties": {
                    "uri": {
                      "help": "The URI of the incoming HTTP request",
                      "type": "string"
                    },
                    "body": {
                      "help": "The JSON body of the incoming HTTP request",
                      "type": "map"
                    },
                    "path": {
                      "help": "The path portion of th URI of the incoming HTTP request",
                      "type": "string"
                    },
                    "headers": {
                      "help": "The HTTP headers of the incoming HTTP request",
                      "type": "map"
                    },
                    "query_params": {
                      "help": "The parsed query parameters of the HTTP request",
                      "type": "map"
                    }
                  },
                  "contentType": "application/json"
                },
                "arguments": {
                  "path": {
                    "in": "requestBody",
                    "type": "string",
                    "required": "true"
                  },
                  "method": {
                    "in": "requestBody",
                    "enum": [
                      "get",
                      "post",
                      "patch",
                      "delete",
                      "put",
                      "options"
                    ],
                    "type": "string",
                    "default": "get"
                  }
                }
              }
            }
          }
        },
        "entrypoint": {
          "help": "Does nothing",
          "arguments": {
            "path": {
              "help": "Nothing to see here",
              "type": "string",
              "required": "true"
            }
          }
        },
        "commands": {
          "read": {
            "output": {
              "type": "any"
            },
            "arguments": {
              "path": {
                "type": "string",
                "required": "true"
              }
            }
          }
        },
        "volumes": {
          "py": {
            "target": "/data"
          }
        },
        "info": {
          "title": "Stockbroker",
          "license": {
            "url": "https://opensource.org/licenses/MIT",
            "name": "MIT"
          },
          "version": "0.0.1",
          "description": "An http service to fetch stock prices"
        }
      },
      "readme": "# Storyscript HTTP Gateway\n\nAPI gateway server for executing Stories via HTTP.\n\n```coffee\nhttp server as server\n  when server listen method:'get' path:'/' as r\n    log info msg:r.body\n    log info msg:r.headers\n    log info msg:r.headers['Host']\n    r write data:'Hello World'\n    r status code:200\n    r finish\n```\n\n```sh\n$ curl https://foobar.storyscriptapp.com/\nHello World\n```\n\n\n## Development\n\nSetup virtual environment and install dependencies\n```\nvirtualenv -p python3.6 venv\nsource venv/bin/activate\npip install -r requirements.txt\n```\n\nRun locally by calling\n\n```\npython -m app.main --logging=debug --debug\n```\n\n### Register an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/register\n```\n\nNow access that endpoint\n\n```shell\ncurl -X POST -d 'foobar' -H \"Host: a.storyscriptapp.com\" http://localhost:8888/ping\n```\n\n\n### Unregister an endpoint\n\n```shell\ncurl --data '{\"endpoint\": \"http://localhost:9000/story/foo\", \"data\":{\"path\":\"/ping\", \"method\": \"post\", \"host\": \"a\"}}' \\\n     -H \"Content-Type: application/json\" \\\n     localhost:8889/unregister\n```\n"
    }
  },
  "action_fixture": {
    "name": "write",
    "action": {
      "http": {
        "contentType": "application/json",
        "use_action_conn": "true"
      },
      "arguments": {
        "flush": {
          "in": "responseBody",
          "type": "boolean",
          "required": "false"
        }
      },
      "events": {
        "listen": {
          "help": "Listen and respond to http connections by\nregistering with the Storyscript Gateway resulting in a serverless function.\n",
          "http": {
            "port": 8889,
            "subscribe": {
              "path": "/register",
              "method": "post",
              "contentType": "application/json"
            },
            "unsubscribe": {
              "path": "/unregister",
              "method": "post",
              "contentType": "application/json"
            }
          },
          "output": {
            "type": "object",
            "actions": {
              "flush": {
                "http": {
                  "contentType": "application/json",
                  "use_event_conn": "true"
                }
              },
              "write": {
                "http": {
                  "contentType": "application/json",
                  "use_event_conn": "true"
                },
                "arguments": {
                  "flush": {
                    "in": "responseBody",
                    "type": "boolean",
                    "required": "true"
                  },
                  "content": {
                    "in": "responseBody",
                    "type": "string",
                    "required": "true"
                  }
                }
              },
              "finish": {
                "http": {
                  "contentType": "application/json",
                  "use_event_conn": "true"
                }
              },
              "redirect": {
                "help": "Redirect the incoming URL. No additional actions may be used after executing this command.",
                "http": {
                  "contentType": "application/json",
                  "use_event_conn": "true"
                },
                "arguments": {
                  "url": {
                    "in": "responseBody",
                    "type": "string",
                    "required": "true"
                  },
                  "query": {
                    "in": "responseBody",
                    "help": "These query parameters are appended to the URL specified.",
                    "type": "map"
                  }
                }
              },
              "get_header": {
                "http": {
                  "contentType": "application/json",
                  "use_event_conn": "true"
                },
                "arguments": {
                  "key": {
                    "in": "responseBody",
                    "type": "string",
                    "required": "true"
                  }
                }
              },
              "set_header": {
                "http": {
                  "contentType": "application/json",
                  "use_event_conn": "true"
                },
                "arguments": {
                  "key": {
                    "in": "responseBody",
                    "type": "string",
                    "required": "true"
                  },
                  "value": {
                    "in": "responseBody",
                    "type": "string",
                    "required": "true"
                  }
                }
              },
              "set_status": {
                "http": {
                  "contentType": "application/json",
                  "use_event_conn": "true"
                },
                "arguments": {
                  "code": {
                    "in": "responseBody",
                    "type": "int",
                    "required": "true"
                  }
                }
              }
            },
            "properties": {
              "uri": {
                "help": "The URI of the incoming HTTP request",
                "type": "string"
              },
              "body": {
                "help": "The JSON body of the incoming HTTP request",
                "type": "map"
              },
              "path": {
                "help": "The path portion of th URI of the incoming HTTP request",
                "type": "string"
              },
              "headers": {
                "help": "The HTTP headers of the incoming HTTP request",
                "type": "map"
              },
              "query_params": {
                "help": "The parsed query parameters of the HTTP request",
                "type": "map"
              }
            },
            "contentType": "application/json"
          },
          "arguments": {
            "path": {
              "in": "requestBody",
              "type": "string",
              "required": "true"
            },
            "method": {
              "in": "requestBody",
              "enum": [
                "get",
                "post",
                "patch",
                "delete",
                "put",
                "options"
              ],
              "type": "string",
              "default": "get"
            }
          }
        }
      },
      "output": {
        "type": "object",
        "actions": {
          "redirect": {
            "help": "Redirect the incoming URL. No additional actions may be used after executing this command.",
            "http": {
              "contentType": "application/json",
              "use_event_conn": "true"
            },
            "arguments": {
              "url": {
                "in": "responseBody",
                "type": "string",
                "required": "true"
              },
              "query": {
                "in": "responseBody",
                "help": "These query parameters are appended to the URL specified.",
                "type": "map"
              }
            }
          }
        },
        "properties": {
          "path": {
            "help": "The path portion of th URI of the incoming HTTP request",
            "type": "string"
          }
        },
        "contentType": "application/json"
      }
    }
  },
  "argument_fixture" : {
    "name": "path",
    "argument": {
      "type": "string",
      "required": "true"
    }
  },
  "command_fixture" : {
    "name": "read",
    "command": {
      "description": "just reads something",
      "arguments": {
        "path": {
          "type": "string",
          "required": "true"
        }
      }
    }
  },
  "contact_fixture" : {
    "contact": {
      "url": "https://storyscript.io",
      "name": "Aurelien ARINO",
      "email": "aurelien@storyscript.io"
    }
  },
  "entrypoint_fixture" : {
    "entrypoint": {
      "help": "Execute a Python file.",
      "arguments": {
        "path": {
          "help": "Path to the Python file to execute.",
          "type": "string",
          "required": "true"
        }
      }
    }
  },
  "env_fixture": {
    "name": "HASURA_GRAPHQL_DATABASE_URL",
    "environment_variable": {
      "help": "The URL to your postgres database, such as postgres://user:password@host/database_name",
      "type": "string",
      "required": "true"
    }
  },
  "event_fixture" : {
    "name": "listen",
    "event": {
      "help": "Nothing to see here.",
      "http": {
        "port": 8889,
        "subscribe": {
          "path": "/register",
          "method": "post",
          "contentType": "application/json"
        }
      },
      "output": {
        "type": "object",
        "actions": {
          "write": {
            "http": {
              "path": "/digest",
              "port": 8080,
              "method": "post",
              "contentType": "application/json",
              "use_event_conn": "true",
              "subscribe": {
                "path": "/stream/subscribe",
                "method": "post",
                "contentType": "application/json"
              },
              "unsubscribe": {
                "path": "/stream/unsubscribe",
                "method": "post"
              }
            },
            "arguments": {
              "flush": {
                "in": "responseBody",
                "type": "boolean",
                "required": "false"
              }
            },
            "output": {
              "type": "object",
              "actions": {
                "flush": {
                  "http": {
                    "contentType": "application/json",
                    "use_event_conn": "true"
                  }
                },
                "write": {
                  "http": {
                    "contentType": "application/json",
                    "use_event_conn": "true"
                  },
                  "arguments": {
                    "flush": {
                      "in": "responseBody",
                      "type": "boolean",
                      "required": "true"
                    },
                    "content": {
                      "in": "responseBody",
                      "type": "string",
                      "required": "true"
                    }
                  }
                },
                "finish": {
                  "http": {
                    "contentType": "application/json",
                    "use_event_conn": "true"
                  }
                },
                "redirect": {
                  "help": "Redirect the incoming URL. No additional actions may be used after executing this command.",
                  "http": {
                    "contentType": "application/json",
                    "use_event_conn": "true"
                  },
                  "arguments": {
                    "url": {
                      "in": "responseBody",
                      "type": "string",
                      "required": "true"
                    },
                    "query": {
                      "in": "responseBody",
                      "help": "These query parameters are appended to the URL specified.",
                      "type": "map"
                    }
                  }
                },
                "get_header": {
                  "http": {
                    "contentType": "application/json",
                    "use_event_conn": "true"
                  },
                  "arguments": {
                    "key": {
                      "in": "responseBody",
                      "type": "string",
                      "required": "true"
                    }
                  }
                },
                "set_header": {
                  "http": {
                    "contentType": "application/json",
                    "use_event_conn": "true"
                  },
                  "arguments": {
                    "key": {
                      "in": "responseBody",
                      "type": "string",
                      "required": "true"
                    },
                    "value": {
                      "in": "responseBody",
                      "type": "string",
                      "required": "true"
                    }
                  }
                },
                "set_status": {
                  "http": {
                    "contentType": "application/json",
                    "use_event_conn": "true"
                  },
                  "arguments": {
                    "code": {
                      "in": "responseBody",
                      "type": "int",
                      "required": "true"
                    }
                  }
                }
              },
              "properties": {
                "uri": {
                  "help": "The URI of the incoming HTTP request",
                  "type": "string"
                },
                "body": {
                  "help": "The JSON body of the incoming HTTP request",
                  "type": "map"
                },
                "path": {
                  "help": "The path portion of th URI of the incoming HTTP request",
                  "type": "string"
                },
                "headers": {
                  "help": "The HTTP headers of the incoming HTTP request",
                  "type": "map"
                },
                "query_params": {
                  "help": "The parsed query parameters of the HTTP request",
                  "type": "map"
                }
              },
              "contentType": "application/json"
            }
          }
        },
        "properties": {
          "query_params": {
            "help": "The parsed query parameters of the HTTP request",
            "type": "map"
          }
        },
        "contentType": "application/json"
      },
      "arguments": {
        "path": {
          "type": "string",
          "required": "true"
        }
      }
    }
  },
  "http_option_fixture": {
    "http_options": {
      "path": "/digest",
      "port": 8080,
      "method": "post",
      "contentType": "application/json",
      "use_event_conn": "true",
      "subscribe": {
        "path": "/stream/subscribe",
        "method": "post",
        "contentType": "application/json"
      },
      "unsubscribe": {
        "path": "/stream/unsubscribe",
        "method": "post"
      }
    }
  },
  "configuration_fixture": {
    "configuration": {
      "omg": 1,
      "actions": {
        "help": "Make http calls and listen for http connections through the Storyscript Gateway\nresulting in serverless http endpoints.\n",
        "fetch": {
          "help": "Make a HTTP request to the outside world.\nThis command is native to the platform for performance reasons.\n",
          "output": {
            "type": "any"
          },
          "arguments": {
            "url": {
              "in": "requestBody",
              "type": "string",
              "required": "true"
            },
            "body": {
              "in": "requestBody",
              "type": "any"
            },
            "query": {
              "in": "requestBody",
              "help": "Set an optional map of query parameters.\nQuery parameters are automatically appended to the url specified (/url?foo=bar&john=doe)\n",
              "type": "map"
            },
            "method": {
              "in": "requestBody",
              "enum": [
                "get",
                "post",
                "patch",
                "delete",
                "put",
                "options"
              ],
              "type": "string",
              "default": "get"
            },
            "headers": {
              "in": "requestBody",
              "type": "map"
            }
          }
        },
        "server": {
          "events": {
            "listen": {
              "help": "Listen and respond to http connections by\nregistering with the Storyscript Gateway resulting in a serverless function.\n",
              "http": {
                "port": 8889,
                "subscribe": {
                  "path": "/register",
                  "method": "post",
                  "contentType": "application/json"
                },
                "unsubscribe": {
                  "path": "/unregister",
                  "method": "post",
                  "contentType": "application/json"
                }
              },
              "output": {
                "type": "object",
                "actions": {
                  "flush": {
                    "http": {
                      "contentType": "application/json",
                      "use_event_conn": "true"
                    }
                  },
                  "write": {
                    "http": {
                      "contentType": "application/json",
                      "use_event_conn": "true"
                    },
                    "arguments": {
                      "flush": {
                        "in": "responseBody",
                        "type": "boolean",
                        "required": "true"
                      },
                      "content": {
                        "in": "responseBody",
                        "type": "string",
                        "required": "true"
                      }
                    }
                  },
                  "finish": {
                    "http": {
                      "contentType": "application/json",
                      "use_event_conn": "true"
                    }
                  },
                  "redirect": {
                    "help": "Redirect the incoming URL. No additional actions may be used after executing this command.",
                    "http": {
                      "contentType": "application/json",
                      "use_event_conn": "true"
                    },
                    "arguments": {
                      "url": {
                        "in": "responseBody",
                        "type": "string",
                        "required": "true"
                      },
                      "query": {
                        "in": "responseBody",
                        "help": "These query parameters are appended to the URL specified.",
                        "type": "map"
                      }
                    }
                  },
                  "set_header": {
                    "http": {
                      "contentType": "application/json",
                      "use_event_conn": "true"
                    },
                    "arguments": {
                      "key": {
                        "in": "responseBody",
                        "type": "string",
                        "required": "true"
                      },
                      "value": {
                        "in": "responseBody",
                        "type": "string",
                        "required": "true"
                      }
                    }
                  }
                },
                "properties": {
                  "query_params": {
                    "help": "The parsed query parameters of the HTTP request",
                    "type": "map"
                  }
                },
                "contentType": "application/json"
              },
              "arguments": {
                "path": {
                  "in": "requestBody",
                  "type": "string",
                  "required": "true"
                },
                "method": {
                  "in": "requestBody",
                  "enum": [
                    "get",
                    "post",
                    "patch",
                    "delete",
                    "put",
                    "options"
                  ],
                  "type": "string",
                  "default": "get"
                }
              }
            }
          }
        }
      },
      "entrypoint": {
        "help": "Does nothing",
        "arguments": {
          "path": {
            "help": "Nothing to see here",
            "type": "string",
            "required": "true"
          }
        }
      },
      "commands": {
        "read": {
          "output": {
            "type": "any"
          },
          "arguments": {
            "path": {
              "type": "string",
              "required": "true"
            }
          }
        }
      },
      "volumes": {
        "py": {
          "target": "/data"
        }
      },
      "info": {
        "title": "Stockbroker",
        "license": {
          "url": "https://opensource.org/licenses/MIT",
          "name": "MIT"
        },
        "version": "0.0.1",
        "description": "An http service to fetch stock prices",
        "contact": {
          "url": "https://storyscript.io",
          "name": "Aurelien ARINO",
          "email": "aurelien@storyscript.io"
        }
      },
      "expose": {
        "v1_api": {
          "http": {
            "path": "/v1",
            "port": 8080
          }
        },
        "console": {
          "http": {
            "path": "/console",
            "port": 8080
          }
        },
        "graphql": {
          "http": {
            "path": "/v1alpha1",
            "port": 8080
          }
        }
      },
      "lifecycle": {
        "startup": {
          "command": [
            "/bin/graphql-engine",
            "serve"
          ]
        }
      },
      "environment": {
        "HASURA_GRAPHQL_DATABASE_URL": {
          "help": "The URL to your postgres database, such as postgres://user:password@host/database_name",
          "type": "string",
          "required": "true"
        },
        "HASURA_GRAPHQL_ENABLE_CONSOLE": {
          "help": "Whether to enable the built in console or not",
          "type": "boolean",
          "default": "true",
          "required": "true"
        }
      }
    }
  },
  "license_fixture": {
    "license": {
      "url": "https://opensource.org/licenses/MIT",
      "name": "MIT"
    }
  },
  "lifecycle_fixture": {
    "lifecycle": {
      "startup": {
        "command": [
          "/bin/graphql-engine",
          "serve"
        ],
        "timeout": 5000
      }
    }
  },
  "lifecycle_option_fixture": {
    "type": "startup",
    "lifecycle_option": {
      "command": [
        "/bin/graphql-engine",
        "serve"
      ],
      "timeout": 5000
    }
  },
  "output_fixture": {
    "output": {
      "type": "object",
      "actions": {
        "write": {
          "http": {
            "path": "/digest",
            "port": 8080,
            "method": "post",
            "contentType": "application/json",
            "use_event_conn": "true",
            "subscribe": {
              "path": "/stream/subscribe",
              "method": "post",
              "contentType": "application/json"
            },
            "unsubscribe": {
              "path": "/stream/unsubscribe",
              "method": "post"
            }
          },
          "arguments": {
            "flush": {
              "in": "responseBody",
              "type": "boolean",
              "required": "false"
            }
          }
        }
      },
      "properties": {
        "query_params": {
          "help": "The parsed query parameters of the HTTP request",
          "type": "map"
        }
      },
      "contentType": "application/json"
    }
  },
  "output_action_fixture": {
    "name": "write",
    "output_action": {
      "http": {
        "path": "/digest",
        "port": 8080,
        "method": "post",
        "contentType": "application/json",
        "use_event_conn": "true",
        "subscribe": {
          "path": "/stream/subscribe",
          "method": "post",
          "contentType": "application/json"
        },
        "unsubscribe": {
          "path": "/stream/unsubscribe",
          "method": "post"
        }
      },
      "arguments": {
        "flush": {
          "in": "responseBody",
          "type": "boolean",
          "required": "false"
        }
      }
    }
  },
  "output_property_fixture" : {
    "name": "query_params",
    "output_property": {
      "help": "The parsed query parameters of the HTTP request",
      "type": "map"
    }
  },
  "service_info_fixture": {
    "service_info": {
      "title": "Stockbroker",
      "license": {
        "url": "https://opensource.org/licenses/MIT",
        "name": "MIT"
      },
      "version": "0.0.1",
      "description": "An http service to fetch stock prices",
      "contact": {
        "url": "https://storyscript.io",
        "name": "Aurelien ARINO",
        "email": "aurelien@storyscript.io"
      }
    }

  },
  "volume_fixture": {
    "name": "py",
    "volume": {
      "target": "/data"
    }
  },
  "service_fixture": {
    "service": {
      "name": "foaas",
      "alias": null,
      "owner": {
        "username": "Arinono"
      },
      "topics": [
        "foaas"
      ],
      "description": null,
      "isCertified": false,
      "public": true
    }
  }
}